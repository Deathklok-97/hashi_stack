---
- name: Read in Big Token
  command: cat "{{ playbook_dir }}/consul/output/acl_token"
  register: acl_token_output
  run_once: true
  delegate_to: localhost
  when: ansible_hostname in consul_servers

- name: Register Master token
  set_fact:
    master_token: "{{ acl_token_output.stdout }}"
  run_once: true
  when: ansible_hostname in consul_servers

- name: Get policies from Consul
  uri:
    headers:
      X-Consul-Token: "{{ master_token }}"
    url: http://127.0.0.1:8500/v1/acl/policies
    status_code: "200"
    body_format: json
  register: policy_list_response
  run_once: true
  when: ansible_hostname in consul_servers

- name: List Consul Policies
  set_fact:
    policies_exist: "{{ policy_list_response['json'] | selectattr('Name','match','^nomad*') | list | length == 2 }}"
  run_once: true

- name: Add Nomad policies to Consul
  uri:
    body_format: json
    headers:
      X-Consul-Token: "{{ master_token }}"
    url: http://127.0.0.1:8500/v1/acl/policy
    src: "{{ playbook_dir }}/nomad/templates/{{item}}.json"
    method: PUT
    status_code: "200"
  with_items:
    - nomad-client
    - nomad-server
  run_once: true
  when: ansible_hostname in consul_servers and not policies_exist

- name: Set file version
  set_fact:
    file_version: v2

- name: Remove v1 File
  become: yes
  file:
    path: "{{ nomad_config_dir }}/nomad.hcl"
    state: absent

- name: Generate Nomad Server token
  uri:
    headers:
      X-Consul-Token: "{{ master_token }}"
      Content-Type: application/json
    url: http://127.0.0.1:8500/v1/acl/token
    body: "{ \"Policies\": [ {\"Name\":\"nomad-server\"} ] }"
    body_format: json
    method: PUT
    status_code: "200"
  register: nomad_server_response
  when: ansible_hostname in nomad_servers

- name: Generate Nomad Client token
  uri:
    headers:
      X-Consul-Token: "{{ master_token }}"
      Content-Type: application/json
    url: http://127.0.0.1:8500/v1/acl/token
    body: "{ \"Policies\": [ {\"Name\":\"nomad-client\"} ] }"
    body_format: json
    method: PUT
    status_code: "200"
  register: nomad_client_response
  when: ansible_hostname not in nomad_servers 

- name: Nomad | Generate keygen Wan
  command: openssl rand -base64 32
  register: nomad_wan_key
  run_once: true

- name: Nomad | stupid jinja2
  set_fact:
    bootstrap_expect: "{{ groups['nomad_servers'] | length }}"

- name: Nomad | place v2 file
  become: yes
  template:
    src: nomad.hcl.j2
    dest: '{{ nomad_config_dir }}/nomad.hcl'
